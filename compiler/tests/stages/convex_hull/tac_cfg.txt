Function convex_hull(X_coords: shared[list[int; ?]], Y_coords: shared[list[int; ?]], N: plaintext[int], result_X: plaintext[list[int; ?]], result_Y: plaintext[list[int; ?]]) -> tuple[shared[list[int; ?]], shared[list[int; ?]]]:
Entry block: 0
Exit block: 3
Block 0:
    jump
Block 1:
    for i: plaintext[int] in range(0, N)
Block 2:
    is_hull = True
    p1_X = X_coords[i]
    p1_Y = Y_coords[i]
    !1 = (p1_X <= 0)
    !2 = (p1_Y >= 0)
    !3 = (!1 and !2)
    conditional jump !3
Block 3:
    !10 = (result_X, result_Y)
    return !10
Block 4:
    jump
Block 5:
    jump
Block 6:
    (merge from conditional jump !3)
    val_X = result_X[i]
    val_Y = result_Y[i]
    conditional jump is_hull
Block 7:
    for j: plaintext[int] in range(0, N)
Block 8:
    p2_X = X_coords[j]
    p2_Y = Y_coords[j]
    !4 = (p1_X <= p2_X)
    !5 = (p1_Y >= p2_Y)
    !6 = (p1_X <= p2_X)
    !7 = (p1_Y >= p2_Y)
    !8 = (!6 or !7)
    !9 = not !8
    conditional jump !9
Block 9:
    jump
Block 10:
    jump
Block 11:
    is_hull = False
    jump
Block 12:
    (merge from conditional jump !9)
    jump
Block 13:
    jump
Block 14:
    val_X = p1_X
    val_Y = p1_Y
    jump
Block 15:
    (merge from conditional jump is_hull)
    result_X = Update(result_X, i, val_X)
    result_Y = Update(result_Y, i, val_Y)
    jump
Edges: (0, 1, *) (1, 3, F) (1, 2, T) (2, 4, F) (2, 5, T) (4, 6, *) (5, 7, *) (6, 13, F) (6, 14, T) (7, 9, F) (7, 8, T) (8, 10, F) (8, 11, T) (9, 6, *) (10, 12, *) (11, 12, *) (12, 7, *) (13, 15, *) (14, 15, *) (15, 1, *)

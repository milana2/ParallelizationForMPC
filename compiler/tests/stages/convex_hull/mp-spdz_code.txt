def convex_hull(X_coords_0, Y_coords_0, N_0, result_X_0, result_Y_0):
    # Shared array declarations
    _1_2 = _v.sbool.Tensor([N_0])
    _11_0 = sint.Tensor([N_0])
    _12_0 = sint.Tensor([N_0])
    _13_0 = sint.Tensor([N_0])
    _14_0 = sint.Tensor([N_0])
    _15_0 = _v.sbool.Tensor([N_0, N_0])
    _16_0 = sint.Tensor([N_0, N_0])
    _17_0 = sint.Tensor([N_0, N_0])
    _18_0 = sint.Tensor([N_0, N_0])
    _19_0 = sint.Tensor([N_0, N_0])
    _2_2 = _v.sbool.Tensor([N_0])
    _20_0 = _v.sbool.Tensor([N_0])
    _3_2 = _v.sbool.Tensor([N_0])
    _6_3 = _v.sbool.Tensor([N_0, N_0])
    _7_3 = _v.sbool.Tensor([N_0, N_0])
    _8_3 = _v.sbool.Tensor([N_0, N_0])
    _9_3 = _v.sbool.Tensor([N_0, N_0])
    is_hull_3 = _v.sbool.Tensor([N_0, N_0])
    is_hull_5 = _v.sbool.Tensor([N_0, N_0])
    is_hull_6 = _v.sbool.Tensor([N_0])
    p1_X_2 = sint.Tensor([N_0])
    p1_Y_2 = sint.Tensor([N_0])
    p2_X_3 = sint.Tensor([N_0, N_0])
    p2_Y_3 = sint.Tensor([N_0, N_0])
    result_X_2 = sint.Tensor([N_0])
    result_Y_2 = sint.Tensor([N_0])
    val_X_2 = sint.Tensor([N_0])
    val_X_3 = sint.Tensor([N_0])
    val_X_4 = sint.Tensor([N_0])
    val_Y_2 = sint.Tensor([N_0])
    val_Y_3 = sint.Tensor([N_0])
    val_Y_4 = sint.Tensor([N_0])
    # Function body
    _11_0[:] = _v.lift(lambda indices: result_X_0, [N_0]).get_vector()
    _12_0[:] = _v.lift(lambda indices: result_Y_0, [N_0]).get_vector()
    _13_0[:] = _v.lift(lambda indices: (X_coords_0[indices[0]]), [N_0]).get_vector()
    _14_0[:] = _v.lift(lambda indices: (Y_coords_0[indices[0]]), [N_0]).get_vector()
    is_hull_2 = _v.sbool(True)
    _v.vectorized_assign(_16_0, [None, None], _v.lift(lambda indices: (X_coords_0[indices[1]]), [N_0, N_0]).get_vector())
    _v.vectorized_assign(_17_0, [None, None], _v.lift(lambda indices: (Y_coords_0[indices[1]]), [N_0, N_0]).get_vector())
    is_hull_4 = _v.sbool(False)
    val_X_2[:] = _11_0[:]
    val_Y_2[:] = _12_0[:]
    p1_X_2[:] = _13_0[:]
    p1_Y_2[:] = _14_0[:]
    _v.vectorized_assign(_15_0, [None, None], _v.lift(lambda indices: is_hull_2, [N_0, N_0]).get_vector())
    _v.vectorized_assign(p2_X_3, [None, None], _v.vectorized_access(_16_0, [None, None]))
    _v.vectorized_assign(p2_Y_3, [None, None], _v.vectorized_access(_17_0, [None, None]))
    _1_2[:] = (p1_X_2[:] <= sint(0))
    _v.vectorized_assign(_18_0, [None, None], _v.lift(lambda indices: p1_X_2[:], [N_0, N_0]).get_vector())
    val_X_3[:] = p1_X_2[:]
    _2_2[:] = (p1_Y_2[:] >= sint(0))
    _v.vectorized_assign(_19_0, [None, None], _v.lift(lambda indices: p1_Y_2[:], [N_0, N_0]).get_vector())
    val_Y_3[:] = p1_Y_2[:]
    _v.vectorized_assign(_6_3, [None, None], (_v.vectorized_access(_18_0, [None, None]) <= _v.vectorized_access(p2_X_3, [None, None])))
    _3_2[:] = _1_2[:].bit_and(_2_2[:])
    _v.vectorized_assign(_7_3, [None, None], (_v.vectorized_access(_19_0, [None, None]) >= _v.vectorized_access(p2_Y_3, [None, None])))
    _v.vectorized_assign(_8_3, [None, None], OR(_v.vectorized_access(_6_3, [None, None]), _v.vectorized_access(_7_3, [None, None])))
    _v.vectorized_assign(_9_3, [None, None], (_v.vectorized_access(_8_3, [None, None]).bit_not()))
    for _21_0 in range(0, N_0):
        # Set ϕ value
        if _21_0 == 0:
            _v.vectorized_assign(is_hull_3, [None, _21_0], _v.vectorized_access(_15_0, [None, _21_0]))
        else:
            _v.vectorized_assign(is_hull_3, [None, _21_0], _v.vectorized_access(is_hull_5, [None, (_21_0 - 1)]))
        _v.vectorized_assign(is_hull_5, [None, _21_0], _v.vectorized_access(_9_3, [None, _21_0]).if_else(is_hull_4, _v.vectorized_access(is_hull_3, [None, _21_0])))
    # Loop exit ϕ values
    _v.vectorized_assign(is_hull_3, [None, _21_0], _v.vectorized_access(is_hull_5, [None, (_21_0 - 1)]))
    _20_0[:] = _v.drop_dim(is_hull_5)
    is_hull_6[:] = _3_2[:].if_else(_20_0[:], is_hull_2)
    val_X_4[:] = is_hull_6[:].if_else(val_X_3[:], val_X_2[:])
    val_Y_4[:] = is_hull_6[:].if_else(val_Y_3[:], val_Y_2[:])
    _11_0[:] = val_X_4[:]; result_X_2[:] = _11_0[:]
    _12_0[:] = val_Y_4[:]; result_Y_2[:] = _12_0[:]
    _10_1 = (result_X_2,result_Y_2,)
    return _10_1

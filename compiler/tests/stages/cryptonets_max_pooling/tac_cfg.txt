Function cryptonets_max_pooling(vals: shared[list[int; ?]], cols: plaintext[int], rows: plaintext[int], cols_res: plaintext[int], rows_res: plaintext[int], OUTPUT_res: plaintext[list[int; ?]]) -> shared[list[int; ?]]:
Entry block: 0
Exit block: 3
Block 0:
    jump
Block 1:
    for i: plaintext[int] in range(0, rows_res)
Block 2:
    jump
Block 3:
    return OUTPUT_res
Block 4:
    for j: plaintext[int] in range(0, cols_res)
Block 5:
    max = vals[(((i * 2) * cols) + (j * 2))]
    !1 = (vals[((((i * 2) * cols) + (j * 2)) + 1)] > max)
    conditional jump !1
Block 6:
    jump
Block 7:
    jump
Block 8:
    max = vals[((((i * 2) * cols) + (j * 2)) + 1)]
    jump
Block 9:
    (merge from conditional jump !1)
    !2 = (vals[((((i * 2) + 1) * cols) + (j * 2))] > max)
    conditional jump !2
Block 10:
    jump
Block 11:
    max = vals[((((i * 2) + 1) * cols) + (j * 2))]
    jump
Block 12:
    (merge from conditional jump !2)
    !3 = (vals[(((((i * 2) + 1) * cols) + (j * 2)) + 1)] > max)
    conditional jump !3
Block 13:
    jump
Block 14:
    max = vals[(((((i * 2) + 1) * cols) + (j * 2)) + 1)]
    jump
Block 15:
    (merge from conditional jump !3)
    OUTPUT_res = Update(OUTPUT_res, ((i * cols_res) + j), max)
    jump
Edges: (0, 1, *) (1, 3, F) (1, 2, T) (2, 4, *) (4, 6, F) (4, 5, T) (5, 7, F) (5, 8, T) (6, 1, *) (7, 9, *) (8, 9, *) (9, 10, F) (9, 11, T) (10, 12, *) (11, 12, *) (12, 13, F) (12, 14, T) (13, 15, *) (14, 15, *) (15, 4, *)

Function cryptonets_max_pooling(vals!0: shared[list[int; ?]], cols!0: plaintext[int], rows!0: plaintext[int], cols_res!0: plaintext[int], rows_res!0: plaintext[int], OUTPUT_res!0: plaintext[list[int; ?]]) -> shared[list[int; ?]]:
Entry block: 0
Exit block: 3
Block 0:
    jump
Block 1:
    max!1 = Φ(max!0, max!2)
    !1!1 = Φ(!1!0, !1!2)
    !2!1 = Φ(!2!0, !2!2)
    !3!1 = Φ(!3!0, !3!2)
    OUTPUT_res!1 = Φ(OUTPUT_res!0, OUTPUT_res!2)
    for i!1: plaintext[int] in range(0, rows_res!0)
Block 2:
    jump
Block 3:
    return OUTPUT_res!1
Block 4:
    max!2 = Φ(max!1, max!9)
    !1!2 = Φ(!1!1, !1!3)
    !2!2 = Φ(!2!1, !2!3)
    !3!2 = Φ(!3!1, !3!3)
    OUTPUT_res!2 = Φ(OUTPUT_res!1, OUTPUT_res!3)
    for j!1: plaintext[int] in range(0, cols_res!0)
Block 5:
    max!3 = vals!0[(((i!1 * 2) * cols!0) + (j!1 * 2))]
    !1!3 = (vals!0[((((i!1 * 2) * cols!0) + (j!1 * 2)) + 1)] > max!3)
    conditional jump !1!3
Block 6:
    jump
Block 7:
    jump
Block 8:
    max!4 = vals!0[((((i!1 * 2) * cols!0) + (j!1 * 2)) + 1)]
    jump
Block 9:
    max!5 = Φ(max!3, max!4)
    (merge from conditional jump !1!3)
    !2!3 = (vals!0[((((i!1 * 2) + 1) * cols!0) + (j!1 * 2))] > max!5)
    conditional jump !2!3
Block 10:
    jump
Block 11:
    max!6 = vals!0[((((i!1 * 2) + 1) * cols!0) + (j!1 * 2))]
    jump
Block 12:
    max!7 = Φ(max!5, max!6)
    (merge from conditional jump !2!3)
    !3!3 = (vals!0[(((((i!1 * 2) + 1) * cols!0) + (j!1 * 2)) + 1)] > max!7)
    conditional jump !3!3
Block 13:
    jump
Block 14:
    max!8 = vals!0[(((((i!1 * 2) + 1) * cols!0) + (j!1 * 2)) + 1)]
    jump
Block 15:
    max!9 = Φ(max!7, max!8)
    (merge from conditional jump !3!3)
    OUTPUT_res!3 = Update(OUTPUT_res!2, ((i!1 * cols_res!0) + j!1), max!9)
    jump
Edges: (0, 1, *) (1, 3, F) (1, 2, T) (2, 4, *) (4, 6, F) (4, 5, T) (5, 7, F) (5, 8, T) (6, 1, *) (7, 9, *) (8, 9, *) (9, 10, F) (9, 11, T) (10, 12, *) (11, 12, *) (12, 13, F) (12, 14, T) (13, 15, *) (14, 15, *) (15, 4, *)

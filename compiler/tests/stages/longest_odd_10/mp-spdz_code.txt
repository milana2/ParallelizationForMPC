def longest_odd_10(Seq_0, N_0, Syms_0):
    # Shared array declarations
    _1_2 = sintbit.Tensor([N_0])
    _10_0 = sintbit.Tensor([N_0])
    _11_0 = sint.Tensor([N_0])
    _12_0 = sint.Tensor([N_0])
    _13_0 = sint.Tensor([N_0])
    _14_0 = sint.Tensor([N_0])
    _2_2 = sintbit.Tensor([N_0])
    _4_2 = sint.Tensor([N_0])
    _5_2 = sintbit.Tensor([N_0])
    _6_2 = sintbit.Tensor([N_0])
    _7_2 = sintbit.Tensor([N_0])
    _8_0 = sint.Tensor([N_0])
    _9_0 = sint.Tensor([N_0])
    current_length_2 = sint.Tensor([N_0])
    current_length_3 = sint.Tensor([N_0])
    current_length_5 = sint.Tensor([N_0])
    current_length_6 = sint.Tensor([N_0])
    max_length_2 = sint.Tensor([N_0])
    max_length_3 = sint.Tensor([N_0])
    max_length_4 = sint.Tensor([N_0])
    s1_2 = sintbit.Tensor([N_0])
    s2_2 = sintbit.Tensor([N_0])
    s2_3 = sintbit.Tensor([N_0])
    # Function body
    current_length_1 = sint(0)
    max_length_1 = sint(0)
    s2_1 = sintbit(False)
    _11_0[:] = lift(lambda indices: (Seq_0[indices[0]]), [N_0])
    _12_0[:] = lift(lambda indices: (Syms_0[1]), [N_0])
    _13_0[:] = lift(lambda indices: (Seq_0[indices[0]]), [N_0])
    _14_0[:] = lift(lambda indices: (Syms_0[0]), [N_0])
    current_length_4 = sint(0)
    _8_0[:] = lift(lambda indices: current_length_1, [N_0])
    _9_0[:] = lift(lambda indices: max_length_1, [N_0])
    _10_0[:] = lift(lambda indices: s2_1, [N_0])
    _1_2[:] = (_11_0[:] == _12_0[:])
    s2_3[:] = (_13_0[:] == _14_0[:])
    for _16_0 in range(0, N_0):
        # Set ϕ value
        if _16_0 == 0:
            s2_2[_16_0] = _10_0[_16_0]
        else:
            s2_2[_16_0] = s2_3[(_16_0 - 1)]
    # Loop exit ϕ values
    s2_2[_16_0] = s2_3[(_16_0 - 1)]
    s1_2[:] = (s2_2[:] & _1_2[:])
    _2_2[:] = (s2_2[:].if_else(0, 1))
    for _17_0 in range(0, N_0):
        # Set ϕ value
        if _17_0 == 0:
            current_length_2[_17_0] = _8_0[_17_0]
        else:
            current_length_2[_17_0] = current_length_6[(_17_0 - 1)]
        current_length_5[_17_0] = _2_2[_17_0].if_else(current_length_4, current_length_2[_17_0])
        current_length_3[_17_0] = (current_length_2[_17_0] + sint(1))
        current_length_6[_17_0] = s1_2[_17_0].if_else(current_length_3[_17_0], current_length_5[_17_0])
    # Loop exit ϕ values
    current_length_2[_17_0] = current_length_6[(_17_0 - 1)]
    _4_2[:] = (current_length_6[:] & sint(1))
    max_length_3[:] = current_length_6[:]
    _5_2[:] = (_4_2[:] == sint(1))
    for _18_0 in range(0, N_0):
        # Set ϕ value
        if _18_0 == 0:
            max_length_2[_18_0] = _9_0[_18_0]
        else:
            max_length_2[_18_0] = max_length_4[(_18_0 - 1)]
        _6_2[_18_0] = (current_length_6[_18_0] > max_length_2[_18_0])
        _7_2[_18_0] = (_5_2[_18_0] & _6_2[_18_0])
        max_length_4[_18_0] = _7_2[_18_0].if_else(max_length_3[_18_0], max_length_2[_18_0])
    # Loop exit ϕ values
    max_length_2[_18_0] = max_length_4[(_18_0 - 1)]
    _15_0 = drop_dim(max_length_4)
    return _15_0

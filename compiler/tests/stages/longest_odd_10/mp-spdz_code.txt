def longest_odd_10(Seq_0, N_0, Syms_0):
    # Shared array declarations
    _1_2 = sint.Tensor([N_0])
    _10_0 = sint.Tensor([N_0])
    _11_0 = sint.Tensor([N_0])
    _12_0 = sint.Tensor([N_0])
    _13_0 = sint.Tensor([N_0])
    _14_0 = sint.Tensor([N_0])
    _2_2 = sint.Tensor([N_0])
    _4_2 = sint.Tensor([N_0])
    _5_2 = sint.Tensor([N_0])
    _6_2 = sint.Tensor([N_0])
    _7_2 = sint.Tensor([N_0])
    _8_0 = sint.Tensor([N_0])
    _9_0 = sint.Tensor([N_0])
    current_length_2 = sint.Tensor([N_0])
    current_length_3 = sint.Tensor([N_0])
    current_length_5 = sint.Tensor([N_0])
    current_length_6 = sint.Tensor([N_0])
    max_length_2 = sint.Tensor([N_0])
    max_length_3 = sint.Tensor([N_0])
    max_length_4 = sint.Tensor([N_0])
    s1_2 = sint.Tensor([N_0])
    s2_2 = sint.Tensor([N_0])
    s2_3 = sint.Tensor([N_0])
    # Function body
    current_length_1 = 0
    max_length_1 = 0
    s2_1 = False
    _11_0[:] = lift(lambda indices: sint((Seq_0[indices[0]])), [N_0])
    _12_0[:] = lift(lambda indices: sint((Syms_0[1])), [N_0])
    _13_0[:] = lift(lambda indices: sint((Seq_0[indices[0]])), [N_0])
    _14_0[:] = lift(lambda indices: sint((Syms_0[0])), [N_0])
    current_length_4 = 0
    _8_0[:] = lift(lambda indices: sint(current_length_1), [N_0])
    _9_0[:] = lift(lambda indices: sint(max_length_1), [N_0])
    _10_0[:] = lift(lambda indices: sint(s2_1), [N_0])
    _1_2[:] = (_11_0[:] == _12_0[:])
    s2_3[:] = (_13_0[:] == _14_0[:])
    for _16_0 in range(0, N_0):

    s1_2[:] = (s2_2[:] and _1_2[:])
    _2_2[:] = (~s2_2[:])
    for _17_0 in range(0, N_0):

        current_length_5[_17_0] = _2_2[_17_0].if_else(current_length_4, current_length_2[_17_0])
        current_length_3[_17_0] = (current_length_2[_17_0] + 1)
        current_length_6[_17_0] = s1_2[_17_0].if_else(current_length_3[_17_0], current_length_5[_17_0])
    _4_2[:] = (current_length_6[:] & 1)
    max_length_3[:] = current_length_6[:]
    _5_2[:] = (_4_2[:] == 1)
    for _18_0 in range(0, N_0):

        _6_2[_18_0] = (current_length_6[_18_0] > max_length_2[_18_0])
        _7_2[_18_0] = (_5_2[_18_0] and _6_2[_18_0])
        max_length_4[_18_0] = _7_2[_18_0].if_else(max_length_3[_18_0], max_length_2[_18_0])
    _15_0 = drop_dim(max_length_4)
    return _15_0

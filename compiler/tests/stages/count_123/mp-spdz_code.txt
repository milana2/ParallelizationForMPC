def count_123(Seq_0, N_0, Syms_0):
    # Shared array declarations
    _1_2 = sint.Tensor([N_0])
    _10_0 = sint.Tensor([N_0])
    _11_0 = sint.Tensor([N_0])
    _12_0 = sint.Tensor([N_0])
    _13_0 = sint.Tensor([N_0])
    _14_0 = sint.Tensor([N_0])
    _2_2 = sint.Tensor([N_0])
    _3_2 = sint.Tensor([N_0])
    _4_2 = sint.Tensor([N_0])
    _5_2 = sint.Tensor([N_0])
    _6_0 = sint.Tensor([N_0])
    _7_0 = sint.Tensor([N_0])
    _8_0 = sint.Tensor([N_0])
    _9_0 = sint.Tensor([N_0])
    c_2 = sint.Tensor([N_0])
    c_3 = sint.Tensor([N_0])
    c_4 = sint.Tensor([N_0])
    s1_2 = sint.Tensor([N_0])
    s1_3 = sint.Tensor([N_0])
    s2_2 = sint.Tensor([N_0])
    s2_3 = sint.Tensor([N_0])
    # Function body
    s1_1 = sint(False)
    s2_1 = sint(False)
    c_1 = sint(0)
    _9_0[:] = _v.lift(lambda indices: (Seq_0[indices[0]]), [N_0])
    _10_0[:] = _v.lift(lambda indices: (Syms_0[2]), [N_0])
    _11_0[:] = _v.lift(lambda indices: (Seq_0[indices[0]]), [N_0])
    _12_0[:] = _v.lift(lambda indices: (Syms_0[1]), [N_0])
    _13_0[:] = _v.lift(lambda indices: (Seq_0[indices[0]]), [N_0])
    _14_0[:] = _v.lift(lambda indices: (Syms_0[0]), [N_0])
    _6_0[:] = _v.lift(lambda indices: s1_1, [N_0])
    _7_0[:] = _v.lift(lambda indices: s2_1, [N_0])
    _8_0[:] = _v.lift(lambda indices: c_1, [N_0])
    _1_2[:] = (_9_0[:] == _10_0[:])
    _4_2[:] = (_11_0[:] == _12_0[:])
    s1_3[:] = (_13_0[:] == _14_0[:])
    for _16_0 in range(0, N_0):
        # Set ϕ value
        if _16_0 == 0:
            s1_2[_16_0] = _6_0[_16_0]
        else:
            s1_2[_16_0] = s1_3[(_16_0 - 1)]
    # Loop exit ϕ values
    s1_2[_16_0] = s1_3[(_16_0 - 1)]
    for _17_0 in range(0, N_0):
        # Set ϕ value
        if _17_0 == 0:
            s2_2[_17_0] = _7_0[_17_0]
        else:
            s2_2[_17_0] = s2_3[(_17_0 - 1)]
        _5_2[_17_0] = (s1_2[_17_0] | s2_2[_17_0])
        s2_3[_17_0] = (_4_2[_17_0] & _5_2[_17_0])
    # Loop exit ϕ values
    s2_2[_17_0] = s2_3[(_17_0 - 1)]
    _2_2[:] = (s2_2[:] | s1_2[:])
    _3_2[:] = (_1_2[:] & _2_2[:])
    for _18_0 in range(0, N_0):
        # Set ϕ value
        if _18_0 == 0:
            c_2[_18_0] = _8_0[_18_0]
        else:
            c_2[_18_0] = c_4[(_18_0 - 1)]
        c_3[_18_0] = (c_2[_18_0] + sint(1))
        c_4[_18_0] = _3_2[_18_0].if_else(c_3[_18_0], c_2[_18_0])
    # Loop exit ϕ values
    c_2[_18_0] = c_4[(_18_0 - 1)]
    _15_0 = _v.drop_dim(c_4)
    return _15_0

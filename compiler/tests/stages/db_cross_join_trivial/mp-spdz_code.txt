def db_cross_join_trivial(A_0, Len_A_0, B_0, Len_B_0, res_0):
    # Shared array declarations
    _1_4 = _v.sbool.Tensor([Len_A_0, Len_B_0, 3])
    _10_0 = sint.Tensor([Len_A_0, Len_B_0, 3])
    _11_0 = sint.Tensor([Len_A_0, Len_B_0, 3])
    _12_0 = sint.Tensor([Len_A_0, Len_B_0, 3])
    _13_0 = _v.sbool.Tensor([Len_A_0, Len_B_0, 3])
    _14_0 = _v.sbool.Tensor([Len_A_0, Len_B_0, 3])
    _15_0 = _v.sbool.Tensor([Len_A_0, Len_B_0, 3])
    _5_0 = sint.Tensor([Len_A_0, Len_B_0, 3])
    _6_0 = sint.Tensor([Len_A_0, Len_B_0, 3])
    _7_0 = sint.Tensor([Len_A_0, Len_B_0, 3])
    _8_0 = sint.Tensor([Len_A_0, Len_B_0, 3])
    _9_0 = sint.Tensor([Len_A_0, Len_B_0, 3])
    res_4 = sint.Tensor([Len_A_0, Len_B_0, 3])
    v_10 = sint.Tensor([Len_A_0, Len_B_0, 3])
    v_11 = sint.Tensor([Len_A_0, Len_B_0, 3])
    v_5 = sint.Tensor([Len_A_0, Len_B_0, 3])
    v_6 = sint.Tensor([Len_A_0, Len_B_0, 3])
    v_7 = sint.Tensor([Len_A_0, Len_B_0, 3])
    v_8 = sint.Tensor([Len_A_0, Len_B_0, 3])
    v_9 = sint.Tensor([Len_A_0, Len_B_0, 3])
    # Function body
    _v.vectorized_assign(_5_0, [None, None, None], _v.lift(lambda indices: res_0, [Len_A_0, Len_B_0, 3]).get_vector())
    _v.vectorized_assign(_8_0, [None, None, None], _v.lift(lambda indices: (A_0[(indices[0] * 2)]), [Len_A_0, Len_B_0, 3]).get_vector())
    _v.vectorized_assign(_9_0, [None, None, None], _v.lift(lambda indices: (B_0[(indices[1] * 2)]), [Len_A_0, Len_B_0, 3]).get_vector())
    _v.vectorized_assign(_10_0, [None, None, None], _v.lift(lambda indices: (A_0[(indices[0] * 2)]), [Len_A_0, Len_B_0, 3]).get_vector())
    _v.vectorized_assign(_11_0, [None, None, None], _v.lift(lambda indices: (A_0[((indices[0] * 2) + 1)]), [Len_A_0, Len_B_0, 3]).get_vector())
    _v.vectorized_assign(_12_0, [None, None, None], _v.lift(lambda indices: (B_0[((indices[1] * 2) + 1)]), [Len_A_0, Len_B_0, 3]).get_vector())
    v_4 = sint(0)
    _v.vectorized_assign(_13_0, [None, None, None], _v.lift(lambda indices: (indices[2] == sint(0)), [Len_A_0, Len_B_0, 3]).get_vector())
    _v.vectorized_assign(_14_0, [None, None, None], _v.lift(lambda indices: (indices[2] == sint(1)), [Len_A_0, Len_B_0, 3]).get_vector())
    _v.vectorized_assign(_15_0, [None, None, None], _v.lift(lambda indices: (indices[2] == sint(2)), [Len_A_0, Len_B_0, 3]).get_vector())
    _v.vectorized_assign(_6_0, [None, None, None], _v.lift(lambda indices: _v.vectorized_access(_5_0, [None, None, None]), [Len_A_0, Len_A_0, Len_B_0, 3]).get_vector())
    _v.vectorized_assign(_1_4, [None, None, None], (_v.vectorized_access(_8_0, [None, None, None]) == _v.vectorized_access(_9_0, [None, None, None])))
    _v.vectorized_assign(v_5, [None, None, None], _v.vectorized_access(_10_0, [None, None, None]))
    _v.vectorized_assign(v_7, [None, None, None], _v.vectorized_access(_11_0, [None, None, None]))
    _v.vectorized_assign(v_9, [None, None, None], _v.vectorized_access(_12_0, [None, None, None]))
    _v.vectorized_assign(_7_0, [None, None, None], _v.lift(lambda indices: _v.vectorized_access(_6_0, [None, None, None]), [Len_A_0, Len_B_0, 3]).get_vector())
    _v.vectorized_assign(v_6, [None, None, None], _v.vectorized_access(_13_0, [None, None, None]).if_else(_v.vectorized_access(v_5, [None, None, None]), v_4))
    _v.vectorized_assign(v_8, [None, None, None], _v.vectorized_access(_14_0, [None, None, None]).if_else(_v.vectorized_access(v_7, [None, None, None]), _v.vectorized_access(v_6, [None, None, None])))
    _v.vectorized_assign(v_10, [None, None, None], _v.vectorized_access(_15_0, [None, None, None]).if_else(_v.vectorized_access(v_9, [None, None, None]), _v.vectorized_access(v_8, [None, None, None])))
    _v.vectorized_assign(v_11, [None, None, None], _v.vectorized_access(_1_4, [None, None, None]).if_else(_v.vectorized_access(v_10, [None, None, None]), v_4))
    _v.vectorized_assign(_7_0, [None, None, None], _v.vectorized_access(v_11, [None, None, None])); _v.vectorized_assign(res_4, [None, None, None], _v.vectorized_access(_7_0, [None, None, None]))
    return res_4

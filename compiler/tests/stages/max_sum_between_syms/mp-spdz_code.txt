def max_sum_between_syms(Seq_0, N_0, Sym_0):
    # Shared array declarations
    _1_2 = _v.sbool.Tensor([N_0])
    _2_2 = _v.sbool.Tensor([N_0])
    _3_2 = _v.sbool.Tensor([N_0])
    _4_0 = sint.Tensor([N_0])
    _5_0 = sint.Tensor([N_0])
    _6_0 = sint.Tensor([N_0])
    _7_0 = sint.Tensor([N_0])
    _8_0 = sint.Tensor([N_0])
    current_sum_2 = sint.Tensor([N_0])
    current_sum_3 = sint.Tensor([N_0])
    current_sum_5 = sint.Tensor([N_0])
    max_sum_2 = sint.Tensor([N_0])
    max_sum_3 = sint.Tensor([N_0])
    max_sum_4 = sint.Tensor([N_0])
    # Function body
    max_sum_1 = sint(0)
    current_sum_1 = sint(0)
    _6_0 = _v.lift(lambda indices: (Seq_0[indices[0]]), [N_0])
    _7_0 = _v.lift(lambda indices: Sym_0, [N_0])
    _8_0 = _v.lift(lambda indices: (Seq_0[indices[0]]), [N_0])
    current_sum_4 = sint(0)
    _4_0 = _v.lift(lambda indices: max_sum_1, [N_0])
    _5_0 = _v.lift(lambda indices: current_sum_1, [N_0])
    _1_2[:] = (_6_0[:] == _7_0[:])
    _2_2[:] = (_1_2[:].bit_not())
    for _10_0 in range(0, N_0):
        # Set ϕ value
        if _10_0 == 0:
            current_sum_2[_10_0] = _5_0[_10_0]
        else:
            current_sum_2[_10_0] = current_sum_5[(_10_0 - 1)]
        current_sum_3[_10_0] = (current_sum_2[_10_0] + _8_0[_10_0])
        current_sum_5[_10_0] = _2_2[_10_0].if_else(current_sum_3[_10_0], current_sum_4)
    # Loop exit ϕ values
    current_sum_2[_10_0] = current_sum_5[(_10_0 - 1)]
    max_sum_3[:] = current_sum_5[:]
    for _11_0 in range(0, N_0):
        # Set ϕ value
        if _11_0 == 0:
            max_sum_2[_11_0] = _4_0[_11_0]
        else:
            max_sum_2[_11_0] = max_sum_4[(_11_0 - 1)]
        _3_2[_11_0] = (current_sum_5[_11_0] > max_sum_2[_11_0])
        max_sum_4[_11_0] = _3_2[_11_0].if_else(max_sum_3[_11_0], max_sum_2[_11_0])
    # Loop exit ϕ values
    max_sum_2[_11_0] = max_sum_4[(_11_0 - 1)]
    _9_0 = _v.drop_dim(max_sum_4)
    return _9_0

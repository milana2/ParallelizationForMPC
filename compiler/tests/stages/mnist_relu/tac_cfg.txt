Function mnist_relu(input: shared[list[int; ?]], OUTPUT_res: plaintext[list[int; ?]], len_outer: plaintext[int], len_inner: plaintext[int]) -> shared[list[int; ?]]:
Entry block: 0
Exit block: 3
Block 0:
    jump
Block 1:
    for i: plaintext[int] in range(0, len_outer)
Block 2:
    jump
Block 3:
    return OUTPUT_res
Block 4:
    for j: plaintext[int] in range(0, len_inner)
Block 5:
    val = 1
    !1 = (input[((i * len_inner) + j)] > val)
    conditional jump !1
Block 6:
    jump
Block 7:
    jump
Block 8:
    val = input[((i * len_inner) + j)]
    jump
Block 9:
    (merge from conditional jump !1)
    OUTPUT_res = Update(OUTPUT_res, ((i * len_inner) + j), val)
    jump
Edges: (0, 1, *) (1, 3, F) (1, 2, T) (2, 4, *) (4, 6, F) (4, 5, T) (5, 7, F) (5, 8, T) (6, 1, *) (7, 9, *) (8, 9, *) (9, 4, *)

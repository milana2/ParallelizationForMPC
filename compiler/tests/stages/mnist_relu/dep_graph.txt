Nodes:
    parameter input!0
    parameter OUTPUT_res!0
    parameter len_outer!0
    parameter len_inner!0
    for i!1 in range(0, len_outer!0):
    OUTPUT_res!1 = Φ(OUTPUT_res!0, OUTPUT_res!2)
    for j!1 in range(0, len_inner!0):
        OUTPUT_res!2 = Φ(OUTPUT_res!1, OUTPUT_res!3)
        val!3 = 1
        !1!3 = (input!0[((i!1 * len_inner!0) + j!1)] > val!3)
        val!4 = input!0[((i!1 * len_inner!0) + j!1)]
        val!5 = MUX(!1!3, val!4, val!3)
        OUTPUT_res!3 = Update(OUTPUT_res!2, ((i!1 * len_inner!0) + j!1), val!5)
    OUTPUT_res!1 = Φ(OUTPUT_res!0, OUTPUT_res!2)
    for j!1 in range(0, len_inner!0):
    OUTPUT_res!2 = Φ(OUTPUT_res!1, OUTPUT_res!3)
    val!3 = 1
    !1!3 = (input!0[((i!1 * len_inner!0) + j!1)] > val!3)
    val!4 = input!0[((i!1 * len_inner!0) + j!1)]
    val!5 = MUX(!1!3, val!4, val!3)
    OUTPUT_res!3 = Update(OUTPUT_res!2, ((i!1 * len_inner!0) + j!1), val!5)
    OUTPUT_res!2 = Φ(OUTPUT_res!1, OUTPUT_res!3)
    val!3 = 1
    !1!3 = (input!0[((i!1 * len_inner!0) + j!1)] > val!3)
    val!4 = input!0[((i!1 * len_inner!0) + j!1)]
    val!5 = MUX(!1!3, val!4, val!3)
    OUTPUT_res!3 = Update(OUTPUT_res!2, ((i!1 * len_inner!0) + j!1), val!5)
    return OUTPUT_res!1
Forward edges:
    parameter input!0  →  parameter input!0
    parameter input!0  →  !1!3 = (input!0[((i!1 * len_inner!0) + j!1)] > val!3)
    parameter input!0  →  val!4 = input!0[((i!1 * len_inner!0) + j!1)]
    parameter OUTPUT_res!0  →  parameter OUTPUT_res!0
    parameter OUTPUT_res!0  →  OUTPUT_res!1 = Φ(OUTPUT_res!0, OUTPUT_res!2)
    parameter len_outer!0  →  parameter len_outer!0
    parameter len_inner!0  →  parameter len_inner!0
    parameter len_inner!0  →  !1!3 = (input!0[((i!1 * len_inner!0) + j!1)] > val!3)
    parameter len_inner!0  →  val!4 = input!0[((i!1 * len_inner!0) + j!1)]
    parameter len_inner!0  →  OUTPUT_res!3 = Update(OUTPUT_res!2, ((i!1 * len_inner!0) + j!1), val!5)
    for i!1 in range(0, len_outer!0):
    OUTPUT_res!1 = Φ(OUTPUT_res!0, OUTPUT_res!2)
    for j!1 in range(0, len_inner!0):
        OUTPUT_res!2 = Φ(OUTPUT_res!1, OUTPUT_res!3)
        val!3 = 1
        !1!3 = (input!0[((i!1 * len_inner!0) + j!1)] > val!3)
        val!4 = input!0[((i!1 * len_inner!0) + j!1)]
        val!5 = MUX(!1!3, val!4, val!3)
        OUTPUT_res!3 = Update(OUTPUT_res!2, ((i!1 * len_inner!0) + j!1), val!5)  →  !1!3 = (input!0[((i!1 * len_inner!0) + j!1)] > val!3)
    for i!1 in range(0, len_outer!0):
    OUTPUT_res!1 = Φ(OUTPUT_res!0, OUTPUT_res!2)
    for j!1 in range(0, len_inner!0):
        OUTPUT_res!2 = Φ(OUTPUT_res!1, OUTPUT_res!3)
        val!3 = 1
        !1!3 = (input!0[((i!1 * len_inner!0) + j!1)] > val!3)
        val!4 = input!0[((i!1 * len_inner!0) + j!1)]
        val!5 = MUX(!1!3, val!4, val!3)
        OUTPUT_res!3 = Update(OUTPUT_res!2, ((i!1 * len_inner!0) + j!1), val!5)  →  val!4 = input!0[((i!1 * len_inner!0) + j!1)]
    for i!1 in range(0, len_outer!0):
    OUTPUT_res!1 = Φ(OUTPUT_res!0, OUTPUT_res!2)
    for j!1 in range(0, len_inner!0):
        OUTPUT_res!2 = Φ(OUTPUT_res!1, OUTPUT_res!3)
        val!3 = 1
        !1!3 = (input!0[((i!1 * len_inner!0) + j!1)] > val!3)
        val!4 = input!0[((i!1 * len_inner!0) + j!1)]
        val!5 = MUX(!1!3, val!4, val!3)
        OUTPUT_res!3 = Update(OUTPUT_res!2, ((i!1 * len_inner!0) + j!1), val!5)  →  OUTPUT_res!3 = Update(OUTPUT_res!2, ((i!1 * len_inner!0) + j!1), val!5)
    OUTPUT_res!1 = Φ(OUTPUT_res!0, OUTPUT_res!2)  →  OUTPUT_res!2 = Φ(OUTPUT_res!1, OUTPUT_res!3)
    OUTPUT_res!1 = Φ(OUTPUT_res!0, OUTPUT_res!2)  →  return OUTPUT_res!1
    for j!1 in range(0, len_inner!0):
    OUTPUT_res!2 = Φ(OUTPUT_res!1, OUTPUT_res!3)
    val!3 = 1
    !1!3 = (input!0[((i!1 * len_inner!0) + j!1)] > val!3)
    val!4 = input!0[((i!1 * len_inner!0) + j!1)]
    val!5 = MUX(!1!3, val!4, val!3)
    OUTPUT_res!3 = Update(OUTPUT_res!2, ((i!1 * len_inner!0) + j!1), val!5)  →  !1!3 = (input!0[((i!1 * len_inner!0) + j!1)] > val!3)
    for j!1 in range(0, len_inner!0):
    OUTPUT_res!2 = Φ(OUTPUT_res!1, OUTPUT_res!3)
    val!3 = 1
    !1!3 = (input!0[((i!1 * len_inner!0) + j!1)] > val!3)
    val!4 = input!0[((i!1 * len_inner!0) + j!1)]
    val!5 = MUX(!1!3, val!4, val!3)
    OUTPUT_res!3 = Update(OUTPUT_res!2, ((i!1 * len_inner!0) + j!1), val!5)  →  val!4 = input!0[((i!1 * len_inner!0) + j!1)]
    for j!1 in range(0, len_inner!0):
    OUTPUT_res!2 = Φ(OUTPUT_res!1, OUTPUT_res!3)
    val!3 = 1
    !1!3 = (input!0[((i!1 * len_inner!0) + j!1)] > val!3)
    val!4 = input!0[((i!1 * len_inner!0) + j!1)]
    val!5 = MUX(!1!3, val!4, val!3)
    OUTPUT_res!3 = Update(OUTPUT_res!2, ((i!1 * len_inner!0) + j!1), val!5)  →  OUTPUT_res!3 = Update(OUTPUT_res!2, ((i!1 * len_inner!0) + j!1), val!5)
    OUTPUT_res!2 = Φ(OUTPUT_res!1, OUTPUT_res!3)  →  OUTPUT_res!3 = Update(OUTPUT_res!2, ((i!1 * len_inner!0) + j!1), val!5)
    val!3 = 1  →  !1!3 = (input!0[((i!1 * len_inner!0) + j!1)] > val!3)
    val!3 = 1  →  val!5 = MUX(!1!3, val!4, val!3)
    !1!3 = (input!0[((i!1 * len_inner!0) + j!1)] > val!3)  →  val!5 = MUX(!1!3, val!4, val!3)
    val!4 = input!0[((i!1 * len_inner!0) + j!1)]  →  val!5 = MUX(!1!3, val!4, val!3)
    val!5 = MUX(!1!3, val!4, val!3)  →  OUTPUT_res!3 = Update(OUTPUT_res!2, ((i!1 * len_inner!0) + j!1), val!5)
Back edges:
    OUTPUT_res!2 = Φ(OUTPUT_res!1, OUTPUT_res!3)  →  OUTPUT_res!1 = Φ(OUTPUT_res!0, OUTPUT_res!2)
    OUTPUT_res!3 = Update(OUTPUT_res!2, ((i!1 * len_inner!0) + j!1), val!5)  →  OUTPUT_res!2 = Φ(OUTPUT_res!1, OUTPUT_res!3)

def mnist_relu(input_0, OUTPUT_res_0, len_outer_0, len_inner_0):
    # Shared array declarations
    _1_3 = sint.Tensor([len_outer_0, len_inner_0])
    _2_0 = sint.Tensor([len_outer_0, len_inner_0])
    _3_0 = sint.Tensor([len_outer_0, len_inner_0])
    _4_0 = sint.Tensor([len_outer_0, len_inner_0])
    _5_0 = sint.Tensor([len_outer_0, len_inner_0])
    OUTPUT_res_3 = sint.Tensor([len_outer_0, len_inner_0])
    val_4 = sint.Tensor([len_outer_0, len_inner_0])
    val_5 = sint.Tensor([len_outer_0, len_inner_0])
    # Function body
    _2_0.assign_vector_by_indices((lift(lambda indices: sint(OUTPUT_res_0), [len_outer_0, len_inner_0])).get_vector(), None, None)
    _4_0.assign_vector_by_indices((lift(lambda indices: sint((input_0[((indices[0] * len_inner_0) + indices[1])])), [len_outer_0, len_inner_0])).get_vector(), None, None)
    _5_0.assign_vector_by_indices((lift(lambda indices: sint((input_0[((indices[0] * len_inner_0) + indices[1])])), [len_outer_0, len_inner_0])).get_vector(), None, None)
    val_3 = 1
    _3_0.assign_vector_by_indices((lift(lambda indices: sint(_2_0.get_vector_by_indices(None, None)), [len_outer_0, len_inner_0])).get_vector(), None, None)
    _1_3.assign_vector_by_indices(((_4_0.get_vector_by_indices(None, None) > 1)).get_vector(), None, None)
    val_4.assign_vector_by_indices((_5_0.get_vector_by_indices(None, None)).get_vector(), None, None)
    val_5.assign_vector_by_indices((_1_3.get_vector_by_indices(None, None).if_else(val_4.get_vector_by_indices(None, None), val_3)).get_vector(), None, None)
    _3_0.get_vector_by_indices(None, None).assign_vector_by_indices((val_5.get_vector_by_indices(None, None)).get_vector(), None, None); OUTPUT_res_3.assign_vector_by_indices((_3_0{LEN_OUTER_0, LEN_INNER_0}[].get_vector_by_indices(None, None)).get_vector(), None, None)
    return OUTPUT_res_3

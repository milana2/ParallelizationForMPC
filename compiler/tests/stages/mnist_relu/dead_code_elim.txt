Function mnist_relu(input!0: shared[list[int; ?]], OUTPUT_res!0: plaintext[list[int; ?]], len_outer!0: plaintext[int], len_inner!0: plaintext[int]) -> shared[list[int; ?]]:
Entry block: 0
Exit block: 3
Block 0:
    jump
Block 1:
    OUTPUT_res!1 = Φ(OUTPUT_res!0, OUTPUT_res!2)
    for i!1: plaintext[int] in range(0, len_outer!0)
Block 2:
    jump
Block 3:
    return OUTPUT_res!1
Block 4:
    OUTPUT_res!2 = Φ(OUTPUT_res!1, OUTPUT_res!3)
    for j!1: plaintext[int] in range(0, len_inner!0)
Block 5:
    val!3 = 1
    !1!3 = (input!0[((i!1 * len_inner!0) + j!1)] > val!3)
    conditional jump !1!3
Block 6:
    jump
Block 7:
    jump
Block 8:
    val!4 = input!0[((i!1 * len_inner!0) + j!1)]
    jump
Block 9:
    (merge from conditional jump !1!3)
    val!5 = MUX(!1!3, val!4, val!3)
    OUTPUT_res!3 = Update(OUTPUT_res!2, ((i!1 * len_inner!0) + j!1), val!5)
    jump
Edges: (0, 1, *) (1, 3, F) (1, 2, T) (2, 4, *) (4, 6, F) (4, 5, T) (5, 7, F) (5, 8, T) (6, 1, *) (7, 9, *) (8, 9, *) (9, 4, *)

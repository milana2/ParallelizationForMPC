def db_variance(A_0, V_0, len_0):
    # Shared array declarations
    _1_2 = sint.Tensor([len_0])
    _2_0 = sint.Tensor([len_0])
    _3_0 = sint.Tensor([len_0])
    _5_0 = sint.Tensor([len_0])
    _6_0 = sint.Tensor([len_0])
    _7_0 = sint.Tensor([len_0])
    _8_0 = sint.Tensor([len_0])
    V_2 = sint.Tensor([len_0])
    dist_2 = sint.Tensor([len_0])
    res_2 = sint.Tensor([len_0])
    res_3 = sint.Tensor([len_0])
    sum_2 = sint.Tensor([len_0])
    sum_3 = sint.Tensor([len_0])
    # Function body
    sum_1 = sint(0)
    _3_0[:] = lift(lambda indices: (A_0[indices[0]]), [len_0])
    _5_0[:] = lift(lambda indices: V_0, [len_0])
    _6_0[:] = lift(lambda indices: (A_0[indices[0]]), [len_0])
    res_1 = sint(0)
    _2_0[:] = lift(lambda indices: sum_1, [len_0])
    _8_0[:] = lift(lambda indices: res_1, [len_0])
    for _10_0 in range(0, len_0):
        # Set ϕ value
        if _10_0 == 0:
            sum_2[_10_0] = _2_0[_10_0]
        else:
            sum_2[_10_0] = sum_3[(_10_0 - 1)]
        sum_3[_10_0] = (sum_2[_10_0] + _3_0[_10_0])
    # Loop exit ϕ values
    sum_2[_10_0] = sum_3[(_10_0 - 1)]
    _4_0 = drop_dim(sum_3)
    exp_1 = (_4_0 / len_0)
    _7_0[:] = lift(lambda indices: exp_1, [len_0])
    dist_2[:] = (_6_0[:] - _7_0[:])
    _1_2[:] = (dist_2[:] * dist_2[:])
    _5_0[:] = _1_2[:]; V_2[:] = _5_0[:]
    for _11_0 in range(0, len_0):
        # Set ϕ value
        if _11_0 == 0:
            res_2[_11_0] = _8_0[_11_0]
        else:
            res_2[_11_0] = res_3[(_11_0 - 1)]
        res_3[_11_0] = (res_2[_11_0] + V_2[_11_0])
    # Loop exit ϕ values
    res_2[_11_0] = res_3[(_11_0 - 1)]
    _9_0 = drop_dim(res_3)
    variance_1 = (_9_0 / len_0)
    return variance_1

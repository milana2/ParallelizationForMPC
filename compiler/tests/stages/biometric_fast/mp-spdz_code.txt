def biometric_fast(D_0, N_0, C_0, C_sqr_sum_0, two_C_0, S_0, S_sqr_sum_0, differences_0):
    # Shared array declarations
    _1_2 = sint.Tensor([N_0])
    _10_0 = sint.Tensor([N_0])
    _11_0 = sint.Tensor([N_0])
    _16_0 = sint.Tensor([N_0])
    _3_0 = sint.Tensor([N_0])
    _4_0 = sint.Tensor([N_0])
    _5_0 = sint.Tensor([N_0])
    _6_0 = sint.Tensor([N_0])
    _7_0 = sint.Tensor([N_0, D_0])
    _8_0 = sint.Tensor([N_0, D_0])
    _9_0 = sint.Tensor([N_0, D_0])
    a_sqr_plus_b_sqr_2 = sint.Tensor([N_0])
    differences_2 = sint.Tensor([N_0])
    min_diff_2 = sint.Tensor([N_0])
    min_diff_3 = sint.Tensor([N_0])
    min_diff_4 = sint.Tensor([N_0])
    min_index_2 = sint.Tensor([N_0])
    min_index_4 = sint.Tensor([N_0])
    min_index_6 = sint.Tensor([N_0])
    this_diff_2 = sint.Tensor([N_0])
    tmp_3 = sint.Tensor([N_0, D_0])
    two_a_b_3 = sint.Tensor([N_0, D_0])
    two_a_b_4 = sint.Tensor([N_0, D_0])
    # Function body
    min_index_1 = 0
    _4_0[:] = lift(lambda indices: sint(differences_0), [N_0])
    _5_0[:] = lift(lambda indices: sint((S_sqr_sum_0[indices[0]])), [N_0])
    _6_0[:] = lift(lambda indices: sint(C_sqr_sum_0), [N_0])
    two_a_b_2 = 0
    _8_0.assign_vector_by_indices((lift(lambda indices: sint((S_0[((indices[0] * D_0) + indices[1])])), [N_0, D_0])).get_vector(), None, None)
    _9_0.assign_vector_by_indices((lift(lambda indices: sint((two_C_0[indices[1]])), [N_0, D_0])).get_vector(), None, None)
    min_index_3 = 0
    min_diff_1 = 99999
    _16_0[:] = lift(lambda indices: sint(indices[0]), [N_0])
    _3_0[:] = lift(lambda indices: sint(min_index_1), [N_0])
    a_sqr_plus_b_sqr_2[:] = (_5_0[:] + _6_0[:])
    _7_0.assign_vector_by_indices((lift(lambda indices: sint(two_a_b_2), [N_0, D_0])).get_vector(), None, None)
    tmp_3.assign_vector_by_indices(((_8_0.get_vector_by_indices(None, None) * _9_0.get_vector_by_indices(None, None))).get_vector(), None, None)
    _11_0[:] = lift(lambda indices: sint(min_diff_1), [N_0])
    for _15_0 in range(0, N_0):

    for _14_0 in range(0, D_0):

        two_a_b_4.assign_vector_by_indices(((two_a_b_3.get_vector_by_indices(None, _14_0) + tmp_3.get_vector_by_indices(None, _14_0))).get_vector(), None, _14_0)
    _10_0[:] = drop_dim(two_a_b_4)
    this_diff_2[:] = (a_sqr_plus_b_sqr_2[:] - _10_0[:])
    _4_0[:][:] = this_diff_2[:]; differences_2[:] = _4_0{N_0}[][:]
    min_diff_3[:] = differences_2[:]
    for _17_0 in range(0, N_0):

        _1_2[_17_0] = (differences_2[_17_0] < min_diff_2[_17_0])
        min_diff_4[_17_0] = _1_2[_17_0].if_else(min_diff_3[_17_0], min_diff_2[_17_0])
    for _18_0 in range(0, N_0):

        min_index_6[_18_0] = _1_2[_18_0].if_else(_16_0[_18_0], min_index_4[_18_0])
    _12_0 = drop_dim(min_diff_4)
    _13_0 = drop_dim(min_index_6)
    _2_1 = (_12_0,_13_0,)
    return _2_1
